// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: vllm/v1/vllm.proto

package vllmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMApiService_StartLLM_FullMethodName  = "/vllm.v1.LLMApiService/StartLLM"
	LLMApiService_StopLLM_FullMethodName   = "/vllm.v1.LLMApiService/StopLLM"
	LLMApiService_ListLLMs_FullMethodName  = "/vllm.v1.LLMApiService/ListLLMs"
	LLMApiService_UpdateLLM_FullMethodName = "/vllm.v1.LLMApiService/UpdateLLM"
	LLMApiService_CreateLLM_FullMethodName = "/vllm.v1.LLMApiService/CreateLLM"
)

// LLMApiServiceClient is the client API for LLMApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMApiServiceClient interface {
	StartLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
	StopLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
	ListLLMs(ctx context.Context, in *ListLLMsRequest, opts ...grpc.CallOption) (*ListLLMsResponse, error)
	UpdateLLM(ctx context.Context, in *UpdateLLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
	CreateLLM(ctx context.Context, in *CreateLLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
}

type lLMApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMApiServiceClient(cc grpc.ClientConnInterface) LLMApiServiceClient {
	return &lLMApiServiceClient{cc}
}

func (c *lLMApiServiceClient) StartLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, LLMApiService_StartLLM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMApiServiceClient) StopLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, LLMApiService_StopLLM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMApiServiceClient) ListLLMs(ctx context.Context, in *ListLLMsRequest, opts ...grpc.CallOption) (*ListLLMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLLMsResponse)
	err := c.cc.Invoke(ctx, LLMApiService_ListLLMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMApiServiceClient) UpdateLLM(ctx context.Context, in *UpdateLLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, LLMApiService_UpdateLLM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMApiServiceClient) CreateLLM(ctx context.Context, in *CreateLLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, LLMApiService_CreateLLM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMApiServiceServer is the server API for LLMApiService service.
// All implementations must embed UnimplementedLLMApiServiceServer
// for forward compatibility.
type LLMApiServiceServer interface {
	StartLLM(context.Context, *LLMRequest) (*LLMResponse, error)
	StopLLM(context.Context, *LLMRequest) (*LLMResponse, error)
	ListLLMs(context.Context, *ListLLMsRequest) (*ListLLMsResponse, error)
	UpdateLLM(context.Context, *UpdateLLMRequest) (*LLMResponse, error)
	CreateLLM(context.Context, *CreateLLMRequest) (*LLMResponse, error)
	mustEmbedUnimplementedLLMApiServiceServer()
}

// UnimplementedLLMApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMApiServiceServer struct{}

func (UnimplementedLLMApiServiceServer) StartLLM(context.Context, *LLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLLM not implemented")
}
func (UnimplementedLLMApiServiceServer) StopLLM(context.Context, *LLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLLM not implemented")
}
func (UnimplementedLLMApiServiceServer) ListLLMs(context.Context, *ListLLMsRequest) (*ListLLMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLLMs not implemented")
}
func (UnimplementedLLMApiServiceServer) UpdateLLM(context.Context, *UpdateLLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLLM not implemented")
}
func (UnimplementedLLMApiServiceServer) CreateLLM(context.Context, *CreateLLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLLM not implemented")
}
func (UnimplementedLLMApiServiceServer) mustEmbedUnimplementedLLMApiServiceServer() {}
func (UnimplementedLLMApiServiceServer) testEmbeddedByValue()                       {}

// UnsafeLLMApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMApiServiceServer will
// result in compilation errors.
type UnsafeLLMApiServiceServer interface {
	mustEmbedUnimplementedLLMApiServiceServer()
}

func RegisterLLMApiServiceServer(s grpc.ServiceRegistrar, srv LLMApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMApiService_ServiceDesc, srv)
}

func _LLMApiService_StartLLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMApiServiceServer).StartLLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMApiService_StartLLM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMApiServiceServer).StartLLM(ctx, req.(*LLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMApiService_StopLLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMApiServiceServer).StopLLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMApiService_StopLLM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMApiServiceServer).StopLLM(ctx, req.(*LLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMApiService_ListLLMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLLMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMApiServiceServer).ListLLMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMApiService_ListLLMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMApiServiceServer).ListLLMs(ctx, req.(*ListLLMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMApiService_UpdateLLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMApiServiceServer).UpdateLLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMApiService_UpdateLLM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMApiServiceServer).UpdateLLM(ctx, req.(*UpdateLLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMApiService_CreateLLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMApiServiceServer).CreateLLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMApiService_CreateLLM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMApiServiceServer).CreateLLM(ctx, req.(*CreateLLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMApiService_ServiceDesc is the grpc.ServiceDesc for LLMApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vllm.v1.LLMApiService",
	HandlerType: (*LLMApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartLLM",
			Handler:    _LLMApiService_StartLLM_Handler,
		},
		{
			MethodName: "StopLLM",
			Handler:    _LLMApiService_StopLLM_Handler,
		},
		{
			MethodName: "ListLLMs",
			Handler:    _LLMApiService_ListLLMs_Handler,
		},
		{
			MethodName: "UpdateLLM",
			Handler:    _LLMApiService_UpdateLLM_Handler,
		},
		{
			MethodName: "CreateLLM",
			Handler:    _LLMApiService_CreateLLM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vllm/v1/vllm.proto",
}
