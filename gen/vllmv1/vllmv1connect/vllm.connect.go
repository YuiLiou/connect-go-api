// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vllm/v1/vllm.proto

package vllmv1connect

import (
	vllmv1 "connect-go/gen/vllmv1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LLMApiServiceName is the fully-qualified name of the LLMApiService service.
	LLMApiServiceName = "vllm.v1.LLMApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LLMApiServiceStartLLMProcedure is the fully-qualified name of the LLMApiService's StartLLM RPC.
	LLMApiServiceStartLLMProcedure = "/vllm.v1.LLMApiService/StartLLM"
	// LLMApiServiceStopLLMProcedure is the fully-qualified name of the LLMApiService's StopLLM RPC.
	LLMApiServiceStopLLMProcedure = "/vllm.v1.LLMApiService/StopLLM"
	// LLMApiServiceListLLMsProcedure is the fully-qualified name of the LLMApiService's ListLLMs RPC.
	LLMApiServiceListLLMsProcedure = "/vllm.v1.LLMApiService/ListLLMs"
	// LLMApiServiceUpdateLLMProcedure is the fully-qualified name of the LLMApiService's UpdateLLM RPC.
	LLMApiServiceUpdateLLMProcedure = "/vllm.v1.LLMApiService/UpdateLLM"
	// LLMApiServiceCreateLLMProcedure is the fully-qualified name of the LLMApiService's CreateLLM RPC.
	LLMApiServiceCreateLLMProcedure = "/vllm.v1.LLMApiService/CreateLLM"
)

// LLMApiServiceClient is a client for the vllm.v1.LLMApiService service.
type LLMApiServiceClient interface {
	StartLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	StopLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	ListLLMs(context.Context, *connect.Request[vllmv1.ListLLMsRequest]) (*connect.Response[vllmv1.ListLLMsResponse], error)
	UpdateLLM(context.Context, *connect.Request[vllmv1.UpdateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	CreateLLM(context.Context, *connect.Request[vllmv1.CreateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
}

// NewLLMApiServiceClient constructs a client for the vllm.v1.LLMApiService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLLMApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LLMApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	lLMApiServiceMethods := vllmv1.File_vllm_v1_vllm_proto.Services().ByName("LLMApiService").Methods()
	return &lLMApiServiceClient{
		startLLM: connect.NewClient[vllmv1.LLMRequest, vllmv1.LLMResponse](
			httpClient,
			baseURL+LLMApiServiceStartLLMProcedure,
			connect.WithSchema(lLMApiServiceMethods.ByName("StartLLM")),
			connect.WithClientOptions(opts...),
		),
		stopLLM: connect.NewClient[vllmv1.LLMRequest, vllmv1.LLMResponse](
			httpClient,
			baseURL+LLMApiServiceStopLLMProcedure,
			connect.WithSchema(lLMApiServiceMethods.ByName("StopLLM")),
			connect.WithClientOptions(opts...),
		),
		listLLMs: connect.NewClient[vllmv1.ListLLMsRequest, vllmv1.ListLLMsResponse](
			httpClient,
			baseURL+LLMApiServiceListLLMsProcedure,
			connect.WithSchema(lLMApiServiceMethods.ByName("ListLLMs")),
			connect.WithClientOptions(opts...),
		),
		updateLLM: connect.NewClient[vllmv1.UpdateLLMRequest, vllmv1.LLMResponse](
			httpClient,
			baseURL+LLMApiServiceUpdateLLMProcedure,
			connect.WithSchema(lLMApiServiceMethods.ByName("UpdateLLM")),
			connect.WithClientOptions(opts...),
		),
		createLLM: connect.NewClient[vllmv1.CreateLLMRequest, vllmv1.LLMResponse](
			httpClient,
			baseURL+LLMApiServiceCreateLLMProcedure,
			connect.WithSchema(lLMApiServiceMethods.ByName("CreateLLM")),
			connect.WithClientOptions(opts...),
		),
	}
}

// lLMApiServiceClient implements LLMApiServiceClient.
type lLMApiServiceClient struct {
	startLLM  *connect.Client[vllmv1.LLMRequest, vllmv1.LLMResponse]
	stopLLM   *connect.Client[vllmv1.LLMRequest, vllmv1.LLMResponse]
	listLLMs  *connect.Client[vllmv1.ListLLMsRequest, vllmv1.ListLLMsResponse]
	updateLLM *connect.Client[vllmv1.UpdateLLMRequest, vllmv1.LLMResponse]
	createLLM *connect.Client[vllmv1.CreateLLMRequest, vllmv1.LLMResponse]
}

// StartLLM calls vllm.v1.LLMApiService.StartLLM.
func (c *lLMApiServiceClient) StartLLM(ctx context.Context, req *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return c.startLLM.CallUnary(ctx, req)
}

// StopLLM calls vllm.v1.LLMApiService.StopLLM.
func (c *lLMApiServiceClient) StopLLM(ctx context.Context, req *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return c.stopLLM.CallUnary(ctx, req)
}

// ListLLMs calls vllm.v1.LLMApiService.ListLLMs.
func (c *lLMApiServiceClient) ListLLMs(ctx context.Context, req *connect.Request[vllmv1.ListLLMsRequest]) (*connect.Response[vllmv1.ListLLMsResponse], error) {
	return c.listLLMs.CallUnary(ctx, req)
}

// UpdateLLM calls vllm.v1.LLMApiService.UpdateLLM.
func (c *lLMApiServiceClient) UpdateLLM(ctx context.Context, req *connect.Request[vllmv1.UpdateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return c.updateLLM.CallUnary(ctx, req)
}

// CreateLLM calls vllm.v1.LLMApiService.CreateLLM.
func (c *lLMApiServiceClient) CreateLLM(ctx context.Context, req *connect.Request[vllmv1.CreateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return c.createLLM.CallUnary(ctx, req)
}

// LLMApiServiceHandler is an implementation of the vllm.v1.LLMApiService service.
type LLMApiServiceHandler interface {
	StartLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	StopLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	ListLLMs(context.Context, *connect.Request[vllmv1.ListLLMsRequest]) (*connect.Response[vllmv1.ListLLMsResponse], error)
	UpdateLLM(context.Context, *connect.Request[vllmv1.UpdateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
	CreateLLM(context.Context, *connect.Request[vllmv1.CreateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error)
}

// NewLLMApiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLLMApiServiceHandler(svc LLMApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lLMApiServiceMethods := vllmv1.File_vllm_v1_vllm_proto.Services().ByName("LLMApiService").Methods()
	lLMApiServiceStartLLMHandler := connect.NewUnaryHandler(
		LLMApiServiceStartLLMProcedure,
		svc.StartLLM,
		connect.WithSchema(lLMApiServiceMethods.ByName("StartLLM")),
		connect.WithHandlerOptions(opts...),
	)
	lLMApiServiceStopLLMHandler := connect.NewUnaryHandler(
		LLMApiServiceStopLLMProcedure,
		svc.StopLLM,
		connect.WithSchema(lLMApiServiceMethods.ByName("StopLLM")),
		connect.WithHandlerOptions(opts...),
	)
	lLMApiServiceListLLMsHandler := connect.NewUnaryHandler(
		LLMApiServiceListLLMsProcedure,
		svc.ListLLMs,
		connect.WithSchema(lLMApiServiceMethods.ByName("ListLLMs")),
		connect.WithHandlerOptions(opts...),
	)
	lLMApiServiceUpdateLLMHandler := connect.NewUnaryHandler(
		LLMApiServiceUpdateLLMProcedure,
		svc.UpdateLLM,
		connect.WithSchema(lLMApiServiceMethods.ByName("UpdateLLM")),
		connect.WithHandlerOptions(opts...),
	)
	lLMApiServiceCreateLLMHandler := connect.NewUnaryHandler(
		LLMApiServiceCreateLLMProcedure,
		svc.CreateLLM,
		connect.WithSchema(lLMApiServiceMethods.ByName("CreateLLM")),
		connect.WithHandlerOptions(opts...),
	)
	return "/vllm.v1.LLMApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LLMApiServiceStartLLMProcedure:
			lLMApiServiceStartLLMHandler.ServeHTTP(w, r)
		case LLMApiServiceStopLLMProcedure:
			lLMApiServiceStopLLMHandler.ServeHTTP(w, r)
		case LLMApiServiceListLLMsProcedure:
			lLMApiServiceListLLMsHandler.ServeHTTP(w, r)
		case LLMApiServiceUpdateLLMProcedure:
			lLMApiServiceUpdateLLMHandler.ServeHTTP(w, r)
		case LLMApiServiceCreateLLMProcedure:
			lLMApiServiceCreateLLMHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLLMApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLLMApiServiceHandler struct{}

func (UnimplementedLLMApiServiceHandler) StartLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vllm.v1.LLMApiService.StartLLM is not implemented"))
}

func (UnimplementedLLMApiServiceHandler) StopLLM(context.Context, *connect.Request[vllmv1.LLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vllm.v1.LLMApiService.StopLLM is not implemented"))
}

func (UnimplementedLLMApiServiceHandler) ListLLMs(context.Context, *connect.Request[vllmv1.ListLLMsRequest]) (*connect.Response[vllmv1.ListLLMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vllm.v1.LLMApiService.ListLLMs is not implemented"))
}

func (UnimplementedLLMApiServiceHandler) UpdateLLM(context.Context, *connect.Request[vllmv1.UpdateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vllm.v1.LLMApiService.UpdateLLM is not implemented"))
}

func (UnimplementedLLMApiServiceHandler) CreateLLM(context.Context, *connect.Request[vllmv1.CreateLLMRequest]) (*connect.Response[vllmv1.LLMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vllm.v1.LLMApiService.CreateLLM is not implemented"))
}
